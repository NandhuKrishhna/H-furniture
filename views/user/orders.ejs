<style>
.status-pending {
  color: orange;
  font-size: 19px;
  font-weight: bolder;
}

.status-success {
    color: green;
    font-size: 19px;
    font-weight: bolder;
}
.status-failure {
  color: red;
  font-size: 19px;
  font-weight: bolder;
}


.order-card {
  border: 1px solid #ccc;
  padding: 20px;
  border-radius: 10px;
  margin-bottom: 20px;
  width: 80%;
}

.order-card h5, .order-card p {
  margin: 0;
  padding: 0;
}

.order-card .card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: none;
  border-bottom: none;
}

.order-card .card-header .badge {
  background-color: #000;
  color: #fff;
}


.order-item {
  display: flex;
  align-items: center;
  margin-bottom: 15px;
  border-bottom: 1px solid #e0e0e0;
  padding-bottom: 10px;
}

.product-image {
  max-width: 100px;
  max-height: 100px;
  margin-right: 15px;
  border-radius: 5px;
}

/* .product-details {
  flex: 1;
}

.product-price {
  text-align: right;
  margin-left: 15px;
}

.discount-price {
  color: red;
} */

.order-total {
  margin-top: 20px;
  font-weight: bold;
  font-family: monospace;
}

.order-card{
  margin-left: 40px;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}
.cancel-order-btn {
    background-color: rgb(125, 125, 125);
    width: 72px;
}
.return-order-btn{
  background-color: rgb(125, 125, 125);
  width: 72px;
}
.cancel-order-btn:focus{
  border-color: rgb(87, 87, 87);
}
.cancelled-status {
    color: rgb(215, 123, 25);
}
.order-body{
  margin-top:100px;
}
.details-order-btn{
  width: 72px;
}
.invoice-section{
  display: flex;
   flex-direction:column;
}
.download-invoice-btn{
  width: 155px;
    height: 35px;
    border-radius: 0;
}
</style>

<div class="container-fluid">
  <div class="row">
    
    <!-- Sidebar -->
    <%- include("../partials/userSidenav.ejs") %>

    <!-- Form Section -->
    <div class="col-md-9 order-body">
      <h3 style="padding-left: 40px;">Your Orders</h3>

      <% orders.forEach(order => { %>
        <div class="order-card">
          <div class="card-header">
            <h6 style="font-size: 12px;">Order No: <%= order?.orderId %></h6>
            <span class="order-date invoice-section">Ordered: <%= new Date(order.orderDate).toLocaleDateString() %></span>

            <% if (order.orderStatus === 'Delivered') { %>
              <button data-order-id="<%= order._id %>" class="btn btn-secondary download-invoice-btn invoice-section">
                Download Invoice
              </button>
            <% } %>

            <% if (order.paymentMethod === "Razorpay" && order.paymentStatus === "Pending") { %>
              <button style="border-radius: 0;" class="btn btn-warning"
                onclick="window.location.href='/user/re-order/<%= order._id %>'">
                Pay Now
              </button>
            <% } %>
          </div>

          <ul class="order-items-list">
            <% order.orderItems.forEach(item => { %>
              <li class="order-item">
                <img src="/<%= item.image %>" alt="<%= item.name %>" class="product-image">
                <div class="product-details">
                  <div><strong><%= item.name || 'Unknown Product' %></strong></div>
                  <div>Qty: <%= item.quantity || 0 %></div>
                  <div>Price: ₹<%= item.price.toFixed(2) %></div>
                  <div>Status: 
                    <span class="badge 
                      <%= item.status === 'Order Placed' ? 'bg-secondary' : 
                         item.status === 'Shipped' ? 'bg-info' : 
                         item.status === 'Delivered' ? 'bg-success' : 
                         item.status === 'Cancelled' ? 'bg-danger' : 
                         item.status === 'Returned' ? 'bg-dark' : 
                         item.status === 'Return Requested' ? 'bg-warning' : '' 
                      %>">
                      <%= item.status %>
                    </span>
                  </div>
                  

                  <button class="details-order-btn btn-dark" data-order-id="<%= order._id %>" data-item-id="<%= item._id %>">Details</button>

                  <% if (item.status !== 'Cancelled' && item.status !== 'Delivered' && item.status !== 'Return Requested' && item.status !== 'Returned') { %>
                    <button class="cancel-order-btn btn-dark" data-order-id="<%= order._id %>" data-item-id="<%= item._id %>">Cancel</button>
                  <% } %>
                  

                  <% if (item.status === "Delivered") { %>
                    <button class="return-order-btn btn-dark" data-order-id="<%= order._id %>" data-item-id="<%= item._id %>">Return</button>
                  <% } %>
                </div>
              </li>
            <% }) %>
          </ul>

          <div class="order-total">
            <div style="font-size: 20px;">Order Total: ₹<%= order.totalAmount.toFixed(2) %></div>
            <div>
              Payment: 
              <span class="badge 
                <%= order.paymentMethod === 'Razorpay' ? 'bg-primary' : 
                   order.paymentMethod === 'COD' ? 'bg-warning' : '' 
                %>">
                <%= order.paymentMethod %>
              </span>
            </div>
            
            <div>
              Payment Status: 
              <span class="badge 
                <%= order.paymentStatus === 'Pending' ? 'bg-warning' : 
                   order.paymentStatus === 'Success' ? 'bg-success' : 
                   order.paymentStatus === 'Failed' ? 'bg-danger' : '' 
                %>">
                <%= order.paymentStatus %>
              </span>
              
            </div>
          </div>
        </div>
      <% }) %>

    </div>
  </div>
</div>



<script>

  
document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('.download-invoice-btn').forEach(button => {
      button.addEventListener('click', function() {
          const orderId = this.getAttribute('data-order-id');
          if (orderId) {
              window.location.href = `/download-invoice/${orderId}`;
          } else {
              console.error('Order ID not found.');
              alert('Failed to download the invoice: Order ID not found.');
          }
      });
  });
});



$(document).ready(function() {
  $('.cancel-order-btn').click(function() {
    const orderId = $(this).data('order-id');
    const itemId = $(this).data('item-id'); 
    console.log('Order ID:', orderId);
    console.log('Item ID:', itemId);

    if (!orderId || !itemId) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid IDs',
        text: 'Order ID or Item ID is missing. Please try again.',
      });
      return;
    }

    Swal.fire({
      title: 'Are you sure?',
      text: "Do you really want to cancel this item?",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, cancel it!'
    }).then((result) => {
      if (result.isConfirmed) {
        $.ajax({
          url: `/order/${orderId}/item/${itemId}/cancel`,
          type: 'POST',
          success: function(response) {
            if (response.success) {
              Swal.fire({
                icon: 'success',
                title: 'Cancelled',
                text: response.message,
              }).then(() => {
                location.reload(); 
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: response.message,
              });
            }
          },
          error: function(error) {
            console.error(error);
            Swal.fire({
              icon: 'error',
              title: 'An error occurred',
              text: 'An error occurred while cancelling the item. Please try again.',
            });
          }
        });
      }
    });
  });
});

document.querySelectorAll('.details-order-btn').forEach(button => {
  button.addEventListener('click', function() {
    const orderId = this.getAttribute('data-order-id');
    const itemId = this.getAttribute('data-item-id');
    
   
    window.location.href = `/order/${orderId}/item/${itemId}`;
  });
});


document.addEventListener('DOMContentLoaded', function() {
  const returnButtons = document.querySelectorAll('.return-order-btn');

  returnButtons.forEach(button => {
    button.addEventListener('click', function() {
      const orderId = this.getAttribute('data-order-id');
      const itemId = this.getAttribute('data-item-id');

   
      Swal.fire({
        title: 'Are you sure?',
        text: "Do you really want to return this product?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, return it!',
        cancelButtonText: 'No, keep it',
      }).then((result) => {
        if (result.isConfirmed) {
          Swal.fire({
            title: 'Return Order',
            input: 'textarea',
            inputLabel: 'Please enter the reason for the return:',
            inputPlaceholder: 'Type your reason here...',
            inputAttributes: {
              'aria-label': 'Type your reason here'
            },
            showCancelButton: true,
            confirmButtonText: 'Submit',
            cancelButtonText: 'Cancel',
            inputValidator: (value) => {
              if (!value) {
                return 'You need to write something!';
              }
            }
          }).then((result) => {
            if (result.isConfirmed) {
              fetch('/order/return', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ orderId: orderId, itemId: itemId, reason: result.value })
              })
              .then(response => response.json())
              .then(data => {
                if (data.message) {
                  Swal.fire({
                    icon: 'success',
                    title: 'Return Request Submitted',
                    text: data.message,
                  });
                  location.reload();
                } else {
                  Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Something went wrong. Please try again later.',
                  });
                }
              })
              .catch(error => {
                Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: 'An error occurred. Please try again later.',
                });
              });
            }
          });
        }
      });
    });
  });
});


</script>




