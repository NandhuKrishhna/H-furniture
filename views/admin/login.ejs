<div class="container">
  <div class="row justify-content-center align-items-center min-vh-100">
    <div class="col-md-5 d-none d-md-block">
      <img src="/images/login (2).png" class="img-fluid" alt="Responsive image" style="max-width: 100%;">
    </div>
    <div class="col-md-5">
      <div class="login-form p-4">
        <h3 class="mb-4 text-center">Admin Login</h3>


        <div id="formErrors" class="alert alert-danger" style="display:none;"></div>
        <form id="adminForm">
          <div class="form-group">
            <input type="" class="form-control" id="email" name="email" placeholder=" " >
            <label for="email">Email Address</label>
            <div id="emailError" class="text-danger"></div>
          </div>

          <div class="form-group">
            <input type="password" class="form-control" id="password" name="password" placeholder=" ">
            <label for="password">Password</label>
            <div id="passwordError" class="text-danger"></div>
          </div>

          <div class="mt-3">
            <button type="submit" class="btn btn-dark btn-block">Login</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>



<style>
  body {
    background-color: #f8f9fa;
  }
  
  .login-form {
    background: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }
  
  .login-form h3 {
    font-weight: bold;
  }
  
  .form-control {
    border-radius: 5px;
  }
  
  .btn-block {
    border-radius: 5px;
  }

  .alert-danger {
    background: none;
    border: none;
    color: red;
    padding: 0;
    font-weight: bold;
    margin-bottom: 29px; 
    margin-top: -5px; 
  }

  .form-control:focus {
    box-shadow: none;
    border-color: rgb(110, 110, 110);
    outline: none;
  }

  .form-group {
    position: relative;
    margin-bottom: 1.5rem;
  }

  .form-group label {
    position: absolute;
    top: -5px;
    left: 12px;
    padding: 0.75rem 0;
    pointer-events: none;
    transition: all 0.2s ease-out;
    font-size: 1rem;
    color: #aaa;
  }

  .form-group input:focus + label,
  .form-group input:not(:placeholder-shown) + label {
    top: -2rem;
    left: 0;
    color: #000;
    font-size: 0.85rem;
    padding-left: 5px;
  }

  .form-group input {
    padding: 0.75rem 0.75rem 0.25rem;
  }

  .form-group input:focus + label,
  .form-group input:not(:placeholder-shown) + label {
    top: -2rem;
  }


  .img-fluid {
  max-width: 100%;
  transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out; 
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); 
}

.img-fluid:hover {
  transform: scale(1.05); 
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3); /
}

</style>

<script>
 document.getElementById("adminForm").addEventListener('submit', async function(e) {
  e.preventDefault();
  
  const formData = new FormData(this);
  const formObject = Object.fromEntries(formData.entries());
  
  try {
      const response = await fetch('/admin/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formObject)
      });
      
      const data = await response.json();
      
      // Clear previous errors
      document.querySelectorAll('.text-danger').forEach(el => el.innerHTML = '');
      document.getElementById('formErrors').style.display = 'none';

      if (response.ok) {
        localStorage.setItem("token", data.token);
        const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 1500,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.onmouseenter = Swal.stopTimer;
                toast.onmouseleave = Swal.resumeTimer;
            }
        });
    
        Toast.fire({
            icon: 'success',
            title: 'Login Successful! Welcome to <strong>Habus Furniture</strong>'
        }).then(() => {
            window.location.href = "/admin/user_panel"; 
        });
      } else {
          if (data.errors) {
              for (const key in data.errors) {
                  document.getElementById(`${key}Error`).innerHTML = data.errors[key].msg;
              }
          }
          if (data.customError) {
              document.getElementById('formErrors').style.display = 'block';
              document.getElementById('formErrors').innerHTML = data.customError;
          }
          setTimeout(() => {
              document.querySelectorAll('.text-danger').forEach(el => el.innerHTML = '');
              document.getElementById('formErrors').style.display = 'none';
          }, 3000);
      }
  } catch (error) {
      console.error('Error:', error);
  }
});

document.getElementById('togglePassword').addEventListener('click', function() {
    const passwordField = document.getElementById('password');
    const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
    passwordField.setAttribute('type', type);
    this.classList.toggle('fa-eye');
    this.classList.toggle('fa-eye-slash');
  });
  
</script>